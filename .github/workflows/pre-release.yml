name: Pre-Release Validation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to validate (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  validate-tag:
    name: Validate Tag Format
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      is-prerelease: ${{ steps.extract-version.outputs.is-prerelease }}
    
    steps:
    - name: Extract version from tag
      id: extract-version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG="${{ github.ref_name }}"
        fi
        
        echo "Processing tag: $TAG"
        
        # Validate tag format (v1.2.3, v1.2.3-beta.1, etc.)
        if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Invalid tag format: $TAG"
          echo "Expected format: v1.2.3 or v1.2.3-beta.1"
          exit 1
        fi
        
        VERSION=${TAG#v}
        IS_PRERELEASE="false"
        
        # Check if it's a prerelease
        if [[ $TAG =~ -[a-zA-Z] ]]; then
          IS_PRERELEASE="true"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Tag validation successful: $TAG (prerelease: $IS_PRERELEASE)"

  comprehensive-test:
    name: Comprehensive Test Suite
    runs-on: ${{ matrix.os }}
    needs: validate-tag
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: [1.21.x, 1.22.x, 1.23.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Run comprehensive tests
      run: |
        echo "Running comprehensive test suite for release validation"
        go test -v -race -timeout=10m -coverprofile=coverage.out ./...

    - name: Validate test coverage
      run: |
        coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Test coverage: ${coverage}%"
        
        # Require minimum coverage for releases
        if (( $(echo "$coverage < 50.0" | bc -l) )); then
          echo "❌ Test coverage too low for release: ${coverage}% (minimum: 50%)"
          exit 1
        fi
        
        echo "✅ Test coverage acceptable for release: ${coverage}%"

    - name: Run integration tests
      run: go test -v -timeout=5m ./test/integration/...

  build-validation:
    name: Build Validation
    runs-on: ${{ matrix.os }}
    needs: validate-tag
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23.x

    - name: Build release binary with version info
      run: |
        VERSION="${{ needs.validate-tag.outputs.version }}"
        COMMIT="${{ github.sha }}"
        BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        echo "Building release binary with:"
        echo "  Version: $VERSION"
        echo "  Commit: $COMMIT"
        echo "  Build Date: $BUILD_DATE"
        
        go build -ldflags "-X github.com/Pradyothsp/pyinit/internal/version.Version=v$VERSION -X github.com/Pradyothsp/pyinit/internal/version.GitCommit=$COMMIT -X github.com/Pradyothsp/pyinit/internal/version.BuildDate=$BUILD_DATE" -o pyinit${{ matrix.os == 'windows-latest' && '.exe' || '' }} ./cmd/pyinit

    - name: Test release binary
      shell: bash
      run: |
        BINARY="pyinit${{ matrix.os == 'windows-latest' && '.exe' || '' }}"
        
        echo "Testing release binary..."
        ./$BINARY --version
        
        # Validate version output
        VERSION_OUTPUT=$(./$BINARY --version)
        echo "Version output: $VERSION_OUTPUT"
        
        # Check that version contains expected information
        if [[ ! $VERSION_OUTPUT =~ pyinit ]]; then
          echo "❌ Version output missing application name"
          exit 1
        fi
        
        if [[ ! $VERSION_OUTPUT =~ v${{ needs.validate-tag.outputs.version }} ]]; then
          echo "❌ Version output missing correct version"
          exit 1
        fi
        
        if [[ ! $VERSION_OUTPUT =~ "Go:" ]]; then
          echo "❌ Version output missing Go version"
          exit 1
        fi
        
        echo "✅ Release binary validation successful"

    - name: Upload release binary
      uses: actions/upload-artifact@v3
      with:
        name: pyinit-${{ matrix.os }}-${{ needs.validate-tag.outputs.version }}
        path: pyinit${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: validate-tag
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23.x

    - name: Run security audit
      run: |
        # Check for known vulnerabilities
        go list -json -deps ./... | nancy sleuth
      continue-on-error: true

    - name: Run gosec security scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt json -out gosec-report.json ./...'

    - name: Analyze security results
      run: |
        if [ -f gosec-report.json ]; then
          issues=$(jq '.Issues | length' gosec-report.json)
          echo "Security issues found: $issues"
          
          if [ "$issues" -gt 5 ]; then
            echo "❌ Too many security issues for release: $issues"
            jq '.Issues[] | {file: .file, line: .line, rule: .rule_id, details: .details}' gosec-report.json
            exit 1
          fi
          
          echo "✅ Security audit passed with $issues issues"
        fi

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: validate-tag
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check required documentation
      run: |
        echo "Checking documentation for release..."
        
        # Check that README exists and is not empty
        if [ ! -f README.md ] || [ ! -s README.md ]; then
          echo "❌ README.md is missing or empty"
          exit 1
        fi
        
        # Check that CHANGELOG exists for non-prerelease
        if [ "${{ needs.validate-tag.outputs.is-prerelease }}" == "false" ]; then
          if [ ! -f CHANGELOG.md ]; then
            echo "⚠️  CHANGELOG.md is recommended for releases"
          fi
        fi
        
        # Check that key files exist
        required_files=("go.mod" "go.sum" "LICENSE" "templates")
        for file in "${required_files[@]}"; do
          if [ ! -e "$file" ]; then
            echo "❌ Required file/directory missing: $file"
            exit 1
          fi
        done
        
        echo "✅ Documentation check passed"

  release-readiness:
    name: Release Readiness Check
    runs-on: ubuntu-latest
    needs: [validate-tag, comprehensive-test, build-validation, security-audit, documentation-check]
    
    steps:
    - name: Validate all checks passed
      run: |
        echo "🎉 Release validation completed successfully!"
        echo ""
        echo "Release Details:"
        echo "  Version: v${{ needs.validate-tag.outputs.version }}"
        echo "  Prerelease: ${{ needs.validate-tag.outputs.is-prerelease }}"
        echo "  Commit: ${{ github.sha }}"
        echo ""
        echo "Validation Results:"
        echo "  ✅ Tag format validation"
        echo "  ✅ Comprehensive tests (multiple OS/Go versions)"
        echo "  ✅ Build validation" 
        echo "  ✅ Security audit"
        echo "  ✅ Documentation check"
        echo ""
        echo "🚀 Ready for release!"

  create-release-notes:
    name: Create Release Notes
    runs-on: ubuntu-latest
    needs: [validate-tag, release-readiness]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate release notes
      run: |
        VERSION="v${{ needs.validate-tag.outputs.version }}"
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "# Release Notes for $VERSION" > release-notes.md
        echo "" >> release-notes.md
        
        if [ -n "$LAST_TAG" ]; then
          echo "## Changes since $LAST_TAG" >> release-notes.md
          echo "" >> release-notes.md
          git log --oneline --no-merges $LAST_TAG..HEAD | sed 's/^/- /' >> release-notes.md
        else
          echo "## Initial Release" >> release-notes.md
          echo "" >> release-notes.md
          echo "This is the initial release of pyinit." >> release-notes.md
        fi
        
        echo "" >> release-notes.md
        echo "## Checksums" >> release-notes.md
        echo "" >> release-notes.md
        echo "_Checksums will be added during release build._" >> release-notes.md
        
        cat release-notes.md

    - name: Upload release notes
      uses: actions/upload-artifact@v3
      with:
        name: release-notes-${{ needs.validate-tag.outputs.version }}
        path: release-notes.md